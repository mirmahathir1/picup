-- TRIGGER FOR INSERT A NOTIFICATION AFTER COMMENT ON A POST

CREATE OR REPLACE FUNCTION NOTIFICATION_FOR_COMMENT() RETURNS TRIGGER AS $COMMENTS$
DECLARE
	PID INTEGER;
	PNAME TEXT;
	PCAPTION TEXT;
BEGIN
	SELECT PERSON_ID,CAPTION INTO PID,PCAPTION
	FROM POSTS
	WHERE POST_ID=NEW.POST_ID;
	SELECT NAME INTO PNAME
	FROM PERSONS
	WHERE PERSON_ID=NEW.PERSON_ID;
	IF NEW.PERSON_ID!=PID THEN
		INSERT INTO NOTIFICATIONS(PERSON_ID, DATE_TIME,DESCRIPTION,LINK) VALUES
			(PID, current_timestamp(0),INITCAP(PNAME) ||' comment on your post: "' ||  PCAPTION || '"',NEW.POST_ID);
	END IF;
	RETURN NEW;
END;
$COMMENTS$ LANGUAGE plpgsql;

CREATE TRIGGER COMMENT_NOTIFICATION_TRIGGER AFTER INSERT ON COMMENTS
FOR EACH ROW EXECUTE PROCEDURE NOTIFICATION_FOR_COMMENT();


-- TRIGGER FOR CHECKING A PERSON WHETHER GIVE A LIKE ON THE POST AGAIN 


CREATE OR REPLACE FUNCTION CHECK_MULTIPLE_LIKE() RETURNS TRIGGER AS $LIKES$
DECLARE
	PID INTEGER;
	PNAME TEXT;
	PCAPTION TEXT;
BEGIN
	IF NEW.PERSON_ID IN (SELECT PERSON_ID FROM LIKES WHERE POST_ID=NEW.POST_ID)
	THEN
		DELETE FROM LIKES
		WHERE NEW.PERSON_ID=PERSON_ID AND POST_ID=NEW.POST_ID;
		RETURN NULL;
	ELSE
		SELECT PERSON_ID,CAPTION INTO PID,PCAPTION
		FROM POSTS
		WHERE POST_ID=NEW.POST_ID;
		SELECT NAME INTO PNAME
		FROM PERSONS
		WHERE PERSON_ID=NEW.PERSON_ID;
		IF NEW.PERSON_ID!=PID THEN
			INSERT INTO NOTIFICATIONS(PERSON_ID, DATE_TIME,DESCRIPTION,LINK) VALUES
				(PID, current_timestamp(0),INITCAP(PNAME) ||' likes your post: "'||  PCAPTION || '"',NEW.POST_ID);
		END IF;
		RETURN NEW;
	END IF;
END;
$LIKES$ LANGUAGE plpgsql;

CREATE TRIGGER CHECK_LIKE_TRIGGER BEFORE INSERT ON LIKES
FOR EACH ROW EXECUTE PROCEDURE CHECK_MULTIPLE_LIKE();


-- TRIGGER FOR accepting friend request

CREATE OR REPLACE FUNCTION NOTIFICATION_FOR_FRIENDS() RETURNS TRIGGER AS $FRIENDS$
DECLARE
	PNAME TEXT;
BEGIN
	SELECT NAME INTO PNAME
	FROM PERSONS
	WHERE PERSON_ID=NEW.FRIEND_ID;

	INSERT INTO NOTIFICATIONS(PERSON_ID, DATE_TIME,DESCRIPTION,LINK) VALUES
		(NEW.PERSON_ID, current_timestamp(0),'You and ' || INITCAP(PNAME) ||' become friends now',NEW.FRIEND_ID);
	RETURN NEW;
END;
$FRIENDS$ LANGUAGE plpgsql;

CREATE TRIGGER COMMENT_NOTIFICATION_TRIGGER AFTER INSERT ON FRIENDS
	FOR EACH ROW EXECUTE PROCEDURE NOTIFICATION_FOR_FRIENDS();